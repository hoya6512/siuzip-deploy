<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>시우네 Siu's Family</title>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="/public/main.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;600;900&display=swap"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1/locale/ko.js"></script>
    <%- include('favicon.html') %>
  </head>
  <body>
    <%- include('nav.html') %>

    <div class="container-xl main-bg mb-5 pt-4">
      <div class="d-md-flex justify-content-center">
        <div class="year-today clock text-center me-3"></div>
        <div class="day-today clock text-center me-3"></div>
        <div
          id="MyClockDisplay"
          class="clock text-center"
          onload="showTime()"
        ></div>
      </div>
      <hr class="border border-2 border-secondary" />
      <div class="row">
        <div class="col-md-6">
          <div class="rounded shadow">
            <div class="sec_cal">
              <div class="cal_nav">
                <a href="javascript:;" class="nav-btn go-prev">prev</a>
                <div class="year-month"></div>
                <a href="javascript:;" class="nav-btn go-next">next</a>
              </div>
              <div class="cal_wrap">
                <div class="days">
                  <div class="day">MON</div>
                  <div class="day">TUE</div>
                  <div class="day">WED</div>
                  <div class="day">THU</div>
                  <div class="day">FRI</div>
                  <div class="day">SAT</div>
                  <div class="day">SUN</div>
                </div>
                <div class="dates"></div>
              </div>
            </div>
          </div>
          <hr class="border border-2 border-secondary" />
          <!-- <div id="myLocationInfo"></div> -->
          <div
            class="row rounded-top shadow m-0 p-3"
            style="background-color: #58a5e4; color: white"
          >
            <div class="col-4 text-center" id="myWeatherIcon"></div>
            <div
              class="col-8 pt-3 text-end text-md-center"
              id="myWeatherInfo"
            ></div>
          </div>

          <div
            class="text-center row rounded-bottom shadow m-0 mb-2"
            id="myWeatherForecast"
            style="background-color: #555f68; color: white"
          ></div>
          <hr class="border border-2 border-secondary" />
        </div>

        <div class="col-md-6">
          <div class="h-50 border-top border-2 border-primary-subtle">
            <h2
              class="py-2 ps-2 mb-0 border-bottom border-2 border-secondary bg-primary bg-opacity-10 shadow-sm fw-semibold"
            >
              오늘 할 일
            </h2>
            <ul class="todo-list"></ul>
            <hr class="border border-2 border-secondary" />
          </div>

          <div class="h-50 border-top border-2 border-primary-subtle">
            <h2
              class="py-2 ps-2 mb-0 border-bottom border-2 border-secondary bg-primary bg-opacity-10 shadow-sm fw-semibold"
            >
              최근 등록된 글
            </h2>
            <ul class="blog-list"></ul>
            <hr class="border border-2 border-secondary" />
          </div>
        </div>
      </div>
    </div>
    <script>
      window.onload = () => {
        if (new URL(location.href).searchParams.get("error")) {
          alert("로그인한 상태 입니다.");
        }
      };
      window.onload = () => {
        if (new URL(location.href).searchParams.get("loginError")) {
          alert(new URL(location.href).searchParams.get("loginError"));
        }
      };
    </script>

    <style>
      .sec_cal {
        width: 100%;
        margin: 0 auto;
      }

      .sec_cal .cal_nav {
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: 700;
        font-size: 48px;
        line-height: 78px;
      }

      .sec_cal .cal_nav .year-month {
        width: 300px;
        text-align: center;
        line-height: 1;
        font-family: "orbitron", sans-serif;
      }

      .sec_cal .cal_nav .nav {
        display: flex;
        border: 1px solid #333333;
        border-radius: 5px;
      }

      .sec_cal .cal_nav .go-prev,
      .sec_cal .cal_nav .go-next {
        display: block;
        width: 50px;
        height: 78px;
        font-size: 0;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .sec_cal .cal_nav .go-prev::before,
      .sec_cal .cal_nav .go-next::before {
        content: "";
        display: block;
        width: 20px;
        height: 20px;
        border: 3px solid #000;
        border-width: 3px 3px 0 0;
        transition: border 0.1s;
      }

      .sec_cal .cal_nav .go-prev:hover::before,
      .sec_cal .cal_nav .go-next:hover::before {
        border-color: #ed2a61;
      }

      .sec_cal .cal_nav .go-prev::before {
        transform: rotate(-135deg);
      }

      .sec_cal .cal_nav .go-next::before {
        transform: rotate(45deg);
      }

      .sec_cal .cal_wrap {
        padding-top: 20px;
        position: relative;
        margin: 0 auto;
      }

      .sec_cal .cal_wrap .days {
        display: flex;
        margin-bottom: 20px;
        padding-bottom: 20px;
        border-bottom: 1px solid #ddd;
      }

      .sec_cal .cal_wrap::after {
        top: 368px;
      }

      .sec_cal .cal_wrap .day {
        display: flex;
        align-items: center;
        justify-content: center;
        width: calc(100% / 7);
        text-align: left;
        color: #999;
        font-family: "orbitron", sans-serif;
        font-size: 15px;
        font-weight: 800;
        text-align: center;
        border-radius: 5px;
      }

      .current.today {
        background: rgb(242 242 242);
      }

      .sec_cal .cal_wrap .dates {
        display: flex;
        flex-flow: wrap;
        height: 290px;
      }

      .sec_cal .cal_wrap .day:nth-child(7n -1) {
        color: #3c6ffa;
      }

      .sec_cal .cal_wrap .day:nth-child(7n) {
        color: #ed2a61;
      }

      .sec_cal .cal_wrap .day.disable {
        color: #ddd;
      }

      .clock {
        /* position: absolute;
        top: 70%;
        left: 50%;
        transform: translateX(-50%) translateY(-50%); */
        color: black;
        font-size: 48px;
        font-family: "Orbitron", sans-serif;

        font-weight: 900;
      }
    </style>
    <script>
      $(document).ready(function () {
        calendarInit();
      });
      /*
          달력 렌더링 할 때 필요한 정보 목록

          현재 월(초기값 : 현재 시간)
          금월 마지막일 날짜와 요일
          전월 마지막일 날짜와 요일
      */

      function calendarInit() {
        // 날짜 정보 가져오기
        var date = new Date(); // 현재 날짜(로컬 기준) 가져오기
        var utc = date.getTime() + date.getTimezoneOffset() * 60 * 1000; // uct 표준시 도출
        var kstGap = 9 * 60 * 60 * 1000; // 한국 kst 기준시간 더하기
        var today = new Date(utc + kstGap); // 한국 시간으로 date 객체 만들기(오늘)

        var thisMonth = new Date(
          today.getFullYear(),
          today.getMonth(),
          today.getDate()
        );
        // 달력에서 표기하는 날짜 객체

        var currentYear = thisMonth.getFullYear(); // 달력에서 표기하는 연
        var currentMonth = thisMonth.getMonth(); // 달력에서 표기하는 월
        var currentDate = thisMonth.getDate(); // 달력에서 표기하는 일

        // kst 기준 현재시간
        // console.log(thisMonth);

        // 캘린더 렌더링
        renderCalender(thisMonth);

        function renderCalender(thisMonth) {
          // 렌더링을 위한 데이터 정리
          currentYear = thisMonth.getFullYear();
          currentMonth = thisMonth.getMonth();
          currentDate = thisMonth.getDate();

          // 이전 달의 마지막 날 날짜와 요일 구하기
          var startDay = new Date(currentYear, currentMonth, 0);
          var prevDate = startDay.getDate();
          var prevDay = startDay.getDay();

          // 이번 달의 마지막날 날짜와 요일 구하기
          var endDay = new Date(currentYear, currentMonth + 1, 0);
          var nextDate = endDay.getDate();
          var nextDay = endDay.getDay();

          // console.log(prevDate, prevDay, nextDate, nextDay);

          // 현재 월 표기
          $(".year-month").text(currentYear + "." + (currentMonth + 1));

          // 렌더링 html 요소 생성
          calendar = document.querySelector(".dates");
          calendar.innerHTML = "";

          // 지난달
          for (var i = prevDate - prevDay + 1; i <= prevDate; i++) {
            calendar.innerHTML =
              calendar.innerHTML +
              '<div class="day prev disable">' +
              i +
              "</div>";
          }
          // 이번달
          for (var i = 1; i <= nextDate; i++) {
            calendar.innerHTML =
              calendar.innerHTML + '<div class="day current">' + i + "</div>";
          }
          // 다음달
          for (var i = 1; i <= (7 - nextDay == 7 ? 0 : 7 - nextDay); i++) {
            calendar.innerHTML =
              calendar.innerHTML +
              '<div class="day next disable">' +
              i +
              "</div>";
          }

          // 오늘 날짜 표기
          if (today.getMonth() == currentMonth) {
            todayDate = today.getDate();
            var currentMonthDate = document.querySelectorAll(".dates .current");
            currentMonthDate[todayDate - 1].classList.add("today");
          }
        }

        // 이전달로 이동
        $(".go-prev").on("click", function () {
          thisMonth = new Date(currentYear, currentMonth - 1, 1);
          renderCalender(thisMonth);
        });

        // 다음달로 이동
        $(".go-next").on("click", function () {
          thisMonth = new Date(currentYear, currentMonth + 1, 1);
          renderCalender(thisMonth);
        });
      }

      function showTime() {
        var date = new Date();
        var h = date.getHours(); // 0 - 23
        var m = date.getMinutes(); // 0 - 59
        var s = date.getSeconds(); // 0 - 59
        var session = "AM";

        if (h == 0) {
          h = 12;
        }

        if (h > 12) {
          h = h - 12;
          session = "PM";
        }

        h = h < 10 ? "0" + h : h;
        m = m < 10 ? "0" + m : m;
        s = s < 10 ? "0" + s : s;

        var time = session + " " + h + ":" + m + ":" + s;
        document.getElementById("MyClockDisplay").innerText = time;
        document.getElementById("MyClockDisplay").textContent = time;

        setTimeout(showTime, 1000);
      }

      showTime();

      $(document).ready(function () {
        // 오늘 할일 리스트 보여주기
        $.ajax({
          method: "GET",
          url: "/todo-today",
        })
          .done(function (결과) {
            // console.log(결과);
            if (결과.length == 0) {
              $(".todo-list").append(
                `<li class="text-center">
                        
                        <h5 style="font-weight: 600">오늘 할 일이 없습니다</h5>
                        <h5 style="font-weight: 600">로그인 후 <a
                        class="link-body-emphasis link-underline link-underline-opacity-25 link-underline-opacity-75-hover"
                        href="/todo"
                        >여기서</a> 등록 해보세요</h5>
                        
                        
                      </li>`
              );
            } else {
              결과.forEach(function (할일) {
                // console.log(data);
                // $("<span>").text(data).appendTo(".category-list");
                $(".todo-list").append(
                  `<li>
                        <a
                        class="d-md-flex link-body-emphasis link-underline link-underline-opacity-0 link-underline-opacity-0-hover"
                        href="/todo-detail/${할일._id}"
                        >
                        <h5 style="font-weight: 600">${할일.제목}<span class="fs-6">(${할일.댓글.length})</span></h5>
                        <p class="ms-auto text-end m-0" style="font-weight: 500">작성자:${할일.작성자id}</p>
                        </a>
                      </li>`
                );
              });
            }
          })
          .fail(function (xhr, textStatus, errorThrown) {
            console.log(xhr, textStatus, errorThrown);
          });

        // 최근 등록된 블로그 포스트 보여주기
        $.ajax({
          method: "GET",
          url: "/blog-latest",
        })
          .done(function (결과) {
            // console.log(결과);
            결과.forEach(function (글목록) {
              // console.log(data);
              // $("<span>").text(data).appendTo(".category-list");
              $(".blog-list").append(
                `<li>
                        <a
                        class="d-md-flex link-body-emphasis link-underline link-underline-opacity-0 link-underline-opacity-0-hover"
                        href="/blog-detail/${글목록._id}"
                        >
                          <h5 style="font-weight: 600"><span class="category px-2 me-2 rounded-pill fs-6 align-middle">${글목록.카테고리}</span>${글목록.제목}<span class="fs-6">(${글목록.댓글.length})</span></h5>
                          <p class="ms-auto text-end m-0" style="font-weight: 500">작성자:${글목록.작성자id}</p>
                        </a>

                      </li>`
              );
            });
          })
          .fail(function (xhr, textStatus, errorThrown) {
            console.log(xhr, textStatus, errorThrown);
          });
      });

      $(document).ready(function () {
        //오늘 할일 타이틀에 오늘 날짜 추가
        $(".year-today").append(dayjs().locale("ko").format("YYYY년"));
        $(".day-today").append(dayjs().locale("ko").format("MM월 DD일 (ddd)"));
      });
    </script>

    <script>
      // // 위치 데이터 받아오기
      // navigator.geolocation.getCurrentPosition(showYourLocation, showErrorMsg);

      // function showYourLocation(position) {
      //   // 성공했을때 실행
      //   var userLat = position.coords.latitude;
      //   var userLng = position.coords.longitude;
      // }

      // function showErrorMsg(error) {
      //   // 실패했을때 실행
      //   switch (error.code) {
      //     case error.PERMISSION_DENIED:
      //       loc.innerHTML =
      //         "이 문장은 사용자가 Geolocation API의 사용 요청을 거부했을 때 나타납니다!";
      //       break;

      //     case error.POSITION_UNAVAILABLE:
      //       loc.innerHTML =
      //         "이 문장은 가져온 위치 정보를 사용할 수 없을 때 나타납니다!";
      //       break;

      //     case error.TIMEOUT:
      //       loc.innerHTML =
      //         "이 문장은 위치 정보를 가져오기 위한 요청이 허용 시간을 초과했을 때 나타납니다!";
      //       break;

      //     case error.UNKNOWN_ERROR:
      //       loc.innerHTML =
      //         "이 문장은 알 수 없는 오류가 발생했을 때 나타납니다!";
      //       break;
      //   }
      // }

      // /* 비동기적으로 현재 위치를 알아내어 지정된 요소에 출력한다. */
      // function whereami(elt) {
      //   // 이 객체를 getCurrentPosition() 메서드의 세번째 인자로 전달한다.
      //   var options = {
      //     // 가능한 경우, 높은 정확도의 위치(예를 들어, GPS 등) 를 읽어오려면 true로 설정
      //     // 그러나 이 기능은 배터리 지속 시간에 영향을 미친다.
      //     enableHighAccuracy: false, // 대략적인 값이라도 상관 없음: 기본값

      //     // 위치 정보가 충분히 캐시되었으면, 이 프로퍼티를 설정하자,
      //     // 위치 정보를 강제로 재확인하기 위해 사용하기도 하는 이 값의 기본 값은 0이다.
      //     maximumAge: 30000, // 5분이 지나기 전까지는 수정되지 않아도 됨

      //     // 위치 정보를 받기 위해 얼마나 오랫동안 대기할 것인가?
      //     // 기본값은 Infinity이므로 getCurrentPosition()은 무한정 대기한다.
      //     timeout: 15000, // 15초 이상 기다리지 않는다.
      //   };

      //   if (navigator.geolocation)
      //     // geolocation 을 지원한다면 위치를 요청한다.
      //     navigator.geolocation.getCurrentPosition(success, error, options);
      //   else
      //     elt.innerHTML = "이 브라우저에서는 Geolocation이 지원되지 않습니다.";

      //   // geolocation 요청이 실패하면 이 함수를 호출한다.
      //   function error(e) {
      //     // 오류 객체에는 수치 코드와 텍스트 메시지가 존재한다.
      //     // 코드 값은 다음과 같다.
      //     // 1: 사용자가 위치 정보를 공유 권한을 제공하지 않음.
      //     // 2: 브라우저가 위치를 가져올 수 없음.
      //     // 3: 타임아웃이 발생됨.
      //     elt.innerHTML = "Geolocation 오류 " + e.code + ": " + e.message;
      //   }

      //   // geolocation 요청이 성공하면 이 함수가 호출된다.
      //   function success(pos) {
      //     console.log(pos); // [디버깅] Position 객체 내용 확인

      //     // 항상 가져올 수 있는 필드들이다. timestamp는 coords 객체 내부에 있지 않고,
      //     // 외부에서 가져오는 필드라는 점에 주의하다.
      //     var msg =
      //       "당신은 " +
      //       new Date(pos.timestamp).toLocaleString() +
      //       "에 " +
      //       " 위도 " +
      //       pos.coords.latitude +
      //       " 경도 " +
      //       pos.coords.longitude +
      //       "에서 " +
      //       " 약 " +
      //       pos.coords.accuracy +
      //       " 미터 떨어진 곳에 있습니다.";

      //     // 해당 기기가 고도 (altitude)를 반환하면, 해당 정보를 추가한다.
      //     if (pos.coords.altitude) {
      //       msg +=
      //         " 당신은 해발 " +
      //         pos.coords.altitude +
      //         " ± " +
      //         pos.coords.altitudeAccuracy +
      //         " 미터에 있습니다.";
      //     }

      //     // 해당 기기가 속도와 북쪽 기준 각 (heading)을 반환한다면 역시 추가해준다.
      //     if (pos.coords.speed) {
      //       msg +=
      //         " 당신은 " +
      //         pos.coords.heading +
      //         " 방향으로 " +
      //         "초속 " +
      //         pos.coords.speed +
      //         "(m/s)의 속도로 움직이고 있습니다.";
      //     }

      //     elt.innerHTML = msg; // 모든 위치 정보를 출력한다.
      //   }
      // }

      // // 나의 위치정보를 출력할 객체 구하기
      // var elt = document.getElementById("myLocationInfo");

      // // 나의 위치정보 출력하기
      // whereami(elt);

      const API_KEY = "9331c0502bd503c72473a5bbddfe288c";

      function onGeoOk(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        console.log(`You live in ${latitude} and ${longitude}`);
        // https://api-bdc.net/data/reverse-geocode?latitude=36.614994&longitude=127.504832&localityLanguage=ko&key=bdc_0c4395a27c5c4b10acad0829b34997a2
        fetch(
          `https://api-bdc.net/data/reverse-geocode?latitude=${latitude}&longitude=${longitude}&localityLanguage=ko&key=bdc_0c4395a27c5c4b10acad0829b34997a2`
        )
          .then((response) => response.json())
          .then((data) =>
            $("#myWeatherInfo").append(
              `<div><h4 class="fw-semibold mb-2">${
                data.localityInfo.administrative[
                  data.localityInfo.administrative.length - 2
                ].name
              }, ${
                data.localityInfo.administrative[
                  data.localityInfo.administrative.length - 1
                ].name
              }</h4></div>`
            )
          );

        fetch(
          `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&lang=kr&appid=${API_KEY}&units=metric`
        )
          .then((response) => response.json())
          .then(function (data) {
            // console.log(
            //   `온도 : ${data.main.temp}, 날씨 : ${data.weather[0].main}`
            // )
            $("#myWeatherIcon").append(
              `<img style=" width: 85px" src="http://openweathermap.org/img/w/${data.weather[0].icon}.png" alt="${data.weather[0].description}"/>
              <h6 class="fw-semibold mb-0">${data.weather[0].description}</h6>`
            );

            $("#myWeatherInfo").append(
              `
              <h1 class="fw-semibold mb-1" style="font-size: 50px">${data.main.temp.toFixed(
                1
              )}℃</h1>
              
              `
            );
          });

        fetch(
          //https://api.openweathermap.org/data/2.5/forecast?lat=35.325396&lon=129.187749&lang=kr&appid=445227776a0f26e74d3badf62bb6a1d5&units=metric
          `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&lang=kr&appid=445227776a0f26e74d3badf62bb6a1d5&units=metric`
        )
          .then((response) => response.json())
          .then(function (data) {
            // console.log(
            //   `온도 : ${data.main.temp}, 날씨 : ${data.weather[0].main}`
            // )
            for (var i = 0; i < 6; i++) {
              $("#myWeatherForecast").append(
                `<div class="col-2 pt-2 pb-0 px-1">
                  <h6 class="fw-semibold">${new Date(
                    data.list[i].dt * 1000
                  ).getHours()}:00</h6>
                  <h6 class="fw-semibold mb-0">${data.list[i].main.temp.toFixed(
                    1
                  )}℃</h6>
                  <img src="http://openweathermap.org/img/w/${
                    data.list[i].weather[0].icon
                  }.png" alt="${data.list[i].weather[0].description}"/>
                </div>`
              );
            }
            // $("#myWeatherInfo").append(
            //   `
            //   <div class="row">

            //     <div class="col-2 bg-info-subtle rounded shadow-sm">
            //       <h5>${new Date(data.list[1].dt * 1000).getHours()}:00</h5>
            //       <h5>${data.list[1].main.temp.toFixed(1)}℃</h5>
            //       <h5><img src="http://openweathermap.org/img/w/${
            //         data.list[1].weather[0].icon
            //       }.png" alt="${data.list[1].weather[0].description}"/></h5>
            //     </div>
            //     <div class="col-2">
            //       <h5>${new Date(data.list[2].dt * 1000).getHours()}:00</h5>
            //       <h5>${data.list[2].main.temp}℃</h5>
            //       <h5>${
            //         data.list[2].weather[0].description
            //       } <img src="http://openweathermap.org/img/w/${
            //         data.list[2].weather[0].icon
            //       }.png" alt="${data.list[2].weather[0].description}"/></h5>
            //     </div>
            //     <div class="col-2">
            //       <h5>${new Date(data.list[3].dt * 1000).getHours()}:00</h5>
            //       <h5>${data.list[3].main.temp}℃</h5>
            //       <h5>${
            //         data.list[3].weather[0].description
            //       } <img src="http://openweathermap.org/img/w/${
            //         data.list[3].weather[0].icon
            //       }.png" alt="${data.list[3].weather[0].description}"/></h5>
            //     </div>
            //     <div class="col-2">
            //       <h5>${new Date(data.list[4].dt * 1000).getHours()}:00</h5>
            //       <h5>${data.list[4].main.temp}℃</h5>
            //       <h5>${
            //         data.list[4].weather[0].description
            //       } <img src="http://openweathermap.org/img/w/${
            //         data.list[4].weather[0].icon
            //       }.png" alt="${data.list[4].weather[0].description}"/></h5>
            //     </div>
            //     <div class="col-2">
            //       <h5>${new Date(data.list[5].dt * 1000).getHours()}:00</h5>
            //       <h5>${data.list[5].main.temp}℃</h5>
            //       <h5>${
            //         data.list[5].weather[0].description
            //       } <img src="http://openweathermap.org/img/w/${
            //         data.list[5].weather[0].icon
            //       }.png" alt="${data.list[5].weather[0].description}"/></h5>
            //     </div>
            //     <div class="col-2">
            //       <h5>${new Date(data.list[6].dt * 1000).getHours()}:00</h5>
            //       <h5>${data.list[6].main.temp}℃</h5>
            //       <h5>${
            //         data.list[6].weather[0].description
            //       } <img src="http://openweathermap.org/img/w/${
            //         data.list[6].weather[0].icon
            //       }.png" alt="${data.list[6].weather[0].description}"/></h5>
            //     </div>
            //   </div>`
            // );
          });
      }

      function onGeoError() {
        alert("Can't find you. No weather for you.");
      }

      navigator.geolocation.getCurrentPosition(onGeoOk, onGeoError);
    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
      integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
      crossorigin="anonymous"
    ></script>

    <style>
      .todo-list,
      .blog-list {
        padding-left: 0px;
      }

      .todo-list li,
      .blog-list li {
        /* margin-top: 5px; */
        list-style: none;
        border-bottom: thin solid;
        /* border-radius: 10px; */
        padding-top: 12px;
        padding-bottom: 12px;
        padding-left: 8px;
        padding-right: 8px;
        /* background-color: #edf3ffc6; */
      }

      .blog-list li a h5,
      .todo-list li a h5 {
        margin: 0px;
      }

      .category {
        border: thin solid #8b9dc3;
        background-color: #dfe3ee;
        color: #3b5998;
        font-weight: 600;
        width: 15%;
        text-align: center;
      }

      @media screen and (max-width: 738px) {
        .blog-list li a h5 {
          margin-top: 4px;
          margin-bottom: 4px;
        }

        .clock {
          font-size: 40px;
        }
      }
    </style>
  </body>
</html>
